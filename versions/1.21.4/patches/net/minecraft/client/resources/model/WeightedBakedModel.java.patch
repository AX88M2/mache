--- a/net/minecraft/client/resources/model/WeightedBakedModel.java
+++ b/net/minecraft/client/resources/model/WeightedBakedModel.java
@@ -2,23 +_,68 @@
 
 import java.util.Collections;
 import java.util.List;
+import java.util.function.Predicate;
+import java.util.function.Supplier;
 import javax.annotation.Nullable;
+
+import net.fabricmc.fabric.api.renderer.v1.mesh.QuadEmitter;
+import net.fabricmc.fabric.api.renderer.v1.model.FabricBakedModel;
 import net.minecraft.client.renderer.block.model.BakedQuad;
+import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.util.RandomSource;
 import net.minecraft.util.random.SimpleWeightedRandomList;
+import net.minecraft.util.random.WeightedEntry;
+import net.minecraft.world.level.BlockAndTintGetter;
 import net.minecraft.world.level.block.state.BlockState;
 
-public class WeightedBakedModel extends DelegateBakedModel {
+public class WeightedBakedModel extends DelegateBakedModel implements FabricBakedModel {
     private final SimpleWeightedRandomList<BakedModel> list;
+    private boolean isVanilla = true;
 
     public WeightedBakedModel(SimpleWeightedRandomList<BakedModel> list) {
         super(list.unwrap().getFirst().data());
         this.list = list;
+        for (WeightedEntry.Wrapper<BakedModel> model : list.unwrap()) {
+            if (!model.data().isVanillaAdapter()) {
+                isVanilla = false;
+                break;
+            }
+        }
     }
 
     @Override
     public List<BakedQuad> getQuads(@Nullable BlockState state, @Nullable Direction direction, RandomSource random) {
         return this.list.getRandomValue(random).map(bakedModel -> bakedModel.getQuads(state, direction, random)).orElse(Collections.emptyList());
+    }
+    @Override
+    public boolean isVanillaAdapter() {
+        return isVanilla;
+    }
+
+    @Override
+    public void emitBlockQuads(QuadEmitter emitter, BlockAndTintGetter blockView, BlockState state, BlockPos pos, Supplier<RandomSource> randomSupplier, Predicate<@org.jetbrains.annotations.Nullable Direction> cullTest) {
+        BakedModel selected = this.list.getRandomValue(randomSupplier.get()).orElse(null);
+
+        if (selected != null) {
+            selected.emitBlockQuads(emitter, blockView, state, pos, () -> {
+                RandomSource random = randomSupplier.get();
+                random.nextInt(); // Imitate vanilla modifying the random before passing it to the submodel
+                return random;
+            }, cullTest);
+        }
+    }
+
+    @Override
+    public void emitItemQuads(QuadEmitter emitter, Supplier<RandomSource> randomSupplier) {
+        BakedModel selected = this.list.getRandomValue(randomSupplier.get()).orElse(null);
+
+        if (selected != null) {
+            selected.emitItemQuads(emitter, () -> {
+                RandomSource random = randomSupplier.get();
+                random.nextInt(); // Imitate vanilla modifying the random before passing it to the submodel
+                return random;
+            });
+        }
     }
 }
