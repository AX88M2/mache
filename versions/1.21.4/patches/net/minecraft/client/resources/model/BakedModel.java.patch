--- a/net/minecraft/client/resources/model/BakedModel.java
+++ b/net/minecraft/client/resources/model/BakedModel.java
@@ -1,15 +_,24 @@
 package net.minecraft.client.resources.model;
 
 import java.util.List;
+import java.util.function.Predicate;
+import java.util.function.Supplier;
 import javax.annotation.Nullable;
+
+import net.caffeinemc.mods.sodium.client.render.frapi.render.AbstractBlockRenderContext;
+import net.caffeinemc.mods.sodium.client.render.frapi.render.ItemRenderContext;
+import net.fabricmc.fabric.api.renderer.v1.mesh.QuadEmitter;
+import net.fabricmc.fabric.api.renderer.v1.model.FabricBakedModel;
 import net.minecraft.client.renderer.block.model.BakedQuad;
 import net.minecraft.client.renderer.block.model.ItemTransforms;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
+import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.util.RandomSource;
+import net.minecraft.world.level.BlockAndTintGetter;
 import net.minecraft.world.level.block.state.BlockState;
 
-public interface BakedModel {
+public interface BakedModel extends FabricBakedModel {
     List<BakedQuad> getQuads(@Nullable BlockState state, @Nullable Direction direction, RandomSource random);
 
     boolean useAmbientOcclusion();
@@ -21,4 +_,24 @@
     TextureAtlasSprite getParticleIcon();
 
     ItemTransforms getTransforms();
+
+    @Override
+    default void emitItemQuads(QuadEmitter emitter, Supplier<RandomSource> randomSupplier) {
+        if (emitter instanceof ItemRenderContext.ItemEmitter itemE && !itemE.hasTransforms()) {
+            itemE.bufferDefaultModel((BakedModel) this);
+        } else {
+            FabricBakedModel.super.emitItemQuads(emitter, randomSupplier);
+        }
+    }
+
+    @Override
+    default void emitBlockQuads(QuadEmitter emitter, BlockAndTintGetter blockView, BlockState state, BlockPos pos, Supplier<RandomSource> randomSupplier, Predicate<@org.jetbrains.annotations.Nullable Direction> cullTest) {
+        if (emitter instanceof AbstractBlockRenderContext.BlockEmitter) {
+            ((AbstractBlockRenderContext.BlockEmitter) emitter).bufferDefaultModel((BakedModel) this, state, cullTest);
+        } else if (emitter instanceof ItemRenderContext.ItemEmitter itemE && !itemE.hasTransforms()) {
+            itemE.bufferDefaultModel((BakedModel) this);
+        } else {
+            FabricBakedModel.super.emitBlockQuads(emitter, blockView, state, pos, randomSupplier, cullTest);
+        }
+    }
 }
