--- a/net/minecraft/client/renderer/chunk/SectionCompiler.java
+++ b/net/minecraft/client/renderer/chunk/SectionCompiler.java
@@ -1,18 +_,16 @@
 package net.minecraft.client.renderer.chunk;
 
-import com.mojang.blaze3d.vertex.BufferBuilder;
-import com.mojang.blaze3d.vertex.ByteBufferBuilder;
-import com.mojang.blaze3d.vertex.DefaultVertexFormat;
-import com.mojang.blaze3d.vertex.MeshData;
-import com.mojang.blaze3d.vertex.PoseStack;
-import com.mojang.blaze3d.vertex.VertexFormat;
-import com.mojang.blaze3d.vertex.VertexSorting;
+import com.mojang.blaze3d.vertex.*;
 import it.unimi.dsi.fastutil.objects.Reference2ObjectArrayMap;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
 import javax.annotation.Nullable;
+
+import net.fabricmc.fabric.impl.client.indigo.Indigo;
+import net.fabricmc.fabric.impl.client.indigo.renderer.accessor.AccessChunkRendererRegion;
+import net.fabricmc.fabric.impl.client.indigo.renderer.render.TerrainRenderContext;
 import net.minecraft.client.renderer.ItemBlockRenderTypes;
 import net.minecraft.client.renderer.RenderType;
 import net.minecraft.client.renderer.SectionBufferBuilderPack;
@@ -20,9 +_,11 @@
 import net.minecraft.client.renderer.block.ModelBlockRenderer;
 import net.minecraft.client.renderer.blockentity.BlockEntityRenderDispatcher;
 import net.minecraft.client.renderer.blockentity.BlockEntityRenderer;
+import net.minecraft.client.resources.model.BakedModel;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
 import net.minecraft.util.RandomSource;
+import net.minecraft.world.level.BlockAndTintGetter;
 import net.minecraft.world.level.block.RenderShape;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
@@ -37,9 +_,7 @@
         this.blockEntityRenderer = blockEntityRenderer;
     }
 
-    public SectionCompiler.Results compile(
-        SectionPos sectionPos, RenderChunkRegion region, VertexSorting vertexSorting, SectionBufferBuilderPack sectionBufferBuilderPack
-    ) {
+    public SectionCompiler.Results compile(SectionPos sectionPos, RenderChunkRegion region, VertexSorting vertexSorting, SectionBufferBuilderPack sectionBufferBuilderPack) {
         SectionCompiler.Results results = new SectionCompiler.Results();
         BlockPos blockPos = sectionPos.origin();
         BlockPos blockPos1 = blockPos.offset(15, 15, 15);
@@ -49,6 +_,10 @@
         Map<RenderType, BufferBuilder> map = new Reference2ObjectArrayMap<>(RenderType.chunkBufferLayers().size());
         RandomSource randomSource = RandomSource.create();
 
+        TerrainRenderContext renderer = (TerrainRenderContext)TerrainRenderContext.POOL.get();
+        renderer.prepare(region, (layer) -> this.getOrBeginLayer(map, sectionBufferBuilderPack, layer));
+        ((AccessChunkRendererRegion)region).fabric_setRenderer(renderer);
+        
         for (BlockPos blockPos2 : BlockPos.betweenClosed(blockPos, blockPos1)) {
             BlockState blockState = region.getBlockState(blockPos2);
             if (blockState.isSolidRender()) {
@@ -78,7 +_,13 @@
                     (float)SectionPos.sectionRelative(blockPos2.getY()),
                     (float)SectionPos.sectionRelative(blockPos2.getZ())
                 );
-                this.blockRenderer.renderBatched(blockState, blockPos2, region, poseStack, orBeginLayer, true, randomSource);
+                //this.blockRenderer.renderBatched(blockState, blockPos2, region, poseStack, orBeginLayer, true, randomSource);
+                BakedModel model = this.blockRenderer.getBlockModel(blockState);
+                if (!Indigo.ALWAYS_TESSELATE_INDIGO && model.isVanillaAdapter()) {
+                    this.blockRenderer.renderBatched(blockState, blockPos2, region, poseStack, orBeginLayer, true, randomSource);
+                } else {
+                    ((AccessChunkRendererRegion)region).fabric_getRenderer().tessellateBlock(blockState, blockPos2, model, poseStack);
+                }
                 poseStack.popPose();
             }
         }
@@ -97,9 +_,11 @@
 
         ModelBlockRenderer.clearCache();
         results.visibilitySet = visGraph.resolve();
+        ((AccessChunkRendererRegion) region).fabric_getRenderer().release();
+        ((AccessChunkRendererRegion) region).fabric_setRenderer(null);
         return results;
     }
-
+    
     private BufferBuilder getOrBeginLayer(Map<RenderType, BufferBuilder> bufferLayers, SectionBufferBuilderPack sectionBufferBuilderPack, RenderType renderType) {
         BufferBuilder bufferBuilder = bufferLayers.get(renderType);
         if (bufferBuilder == null) {
