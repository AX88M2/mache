--- a/net/minecraft/client/renderer/texture/MipmapGenerator.java
+++ b/net/minecraft/client/renderer/texture/MipmapGenerator.java
@@ -1,6 +_,8 @@
 package net.minecraft.client.renderer.texture;
 
 import com.mojang.blaze3d.platform.NativeImage;
+import net.caffeinemc.mods.sodium.api.util.ColorABGR;
+import net.caffeinemc.mods.sodium.client.util.color.ColorSRGB;
 import net.minecraft.Util;
 import net.minecraft.util.ARGB;
 
@@ -68,60 +_,11 @@
         return false;
     }
 
-    private static int alphaBlend(int col0, int col1, int col2, int col3, boolean transparent) {
-        if (transparent) {
-            float f = 0.0F;
-            float f1 = 0.0F;
-            float f2 = 0.0F;
-            float f3 = 0.0F;
-            if (col0 >> 24 != 0) {
-                f += getPow22(col0 >> 24);
-                f1 += getPow22(col0 >> 16);
-                f2 += getPow22(col0 >> 8);
-                f3 += getPow22(col0 >> 0);
-            }
-
-            if (col1 >> 24 != 0) {
-                f += getPow22(col1 >> 24);
-                f1 += getPow22(col1 >> 16);
-                f2 += getPow22(col1 >> 8);
-                f3 += getPow22(col1 >> 0);
-            }
-
-            if (col2 >> 24 != 0) {
-                f += getPow22(col2 >> 24);
-                f1 += getPow22(col2 >> 16);
-                f2 += getPow22(col2 >> 8);
-                f3 += getPow22(col2 >> 0);
-            }
-
-            if (col3 >> 24 != 0) {
-                f += getPow22(col3 >> 24);
-                f1 += getPow22(col3 >> 16);
-                f2 += getPow22(col3 >> 8);
-                f3 += getPow22(col3 >> 0);
-            }
-
-            f /= 4.0F;
-            f1 /= 4.0F;
-            f2 /= 4.0F;
-            f3 /= 4.0F;
-            int i = (int)(Math.pow(f, 0.45454545454545453) * 255.0);
-            int i1 = (int)(Math.pow(f1, 0.45454545454545453) * 255.0);
-            int i2 = (int)(Math.pow(f2, 0.45454545454545453) * 255.0);
-            int i3 = (int)(Math.pow(f3, 0.45454545454545453) * 255.0);
-            if (i < 96) {
-                i = 0;
-            }
-
-            return ARGB.color(i, i1, i2, i3);
-        } else {
-            int i4 = gammaBlend(col0, col1, col2, col3, 24);
-            int i5 = gammaBlend(col0, col1, col2, col3, 16);
-            int i6 = gammaBlend(col0, col1, col2, col3, 8);
-            int i7 = gammaBlend(col0, col1, col2, col3, 0);
-            return ARGB.color(i4, i5, i6, i7);
-        }
+    private static int alphaBlend(int one, int two, int three, int four, boolean checkAlpha) {
+        // First blend horizontally, then blend vertically.
+        //
+        // This works well for the case where our change is the most impactful (grass side overlays)
+        return weightedAverageColor(weightedAverageColor(one, two), weightedAverageColor(three, four));
     }
 
     private static int gammaBlend(int col0, int col1, int col2, int col3, int bitOffset) {
@@ -135,5 +_,65 @@
 
     private static float getPow22(int value) {
         return POW22[value & 0xFF];
+    }
+
+    private static int weightedAverageColor(int one, int two) {
+        int alphaOne = ColorABGR.unpackAlpha(one);
+        int alphaTwo = ColorABGR.unpackAlpha(two);
+
+        // In the case where the alpha values of the same, we can get by with an unweighted average.
+        if (alphaOne == alphaTwo) {
+            return averageRgb(one, two, alphaOne);
+        }
+
+        // If one of our pixels is fully transparent, ignore it.
+        // We just take the value of the other pixel as-is. To compensate for not changing the color value, we
+        // divide the alpha value by 4 instead of 2.
+        if (alphaOne == 0) {
+            return (two & 0x00FFFFFF) | ((alphaTwo >> 2) << 24);
+        }
+
+        if (alphaTwo == 0) {
+            return (one & 0x00FFFFFF) | ((alphaOne >> 2) << 24);
+        }
+
+        // Use the alpha values to compute relative weights of each color.
+        float scale = 1.0f / (alphaOne + alphaTwo);
+
+        float relativeWeightOne = alphaOne * scale;
+        float relativeWeightTwo = alphaTwo * scale;
+
+        // Convert the color components into linear space, then multiply the corresponding weight.
+        float oneR = ColorSRGB.srgbToLinear(ColorABGR.unpackRed(one)) * relativeWeightOne;
+        float oneG = ColorSRGB.srgbToLinear(ColorABGR.unpackGreen(one)) * relativeWeightOne;
+        float oneB = ColorSRGB.srgbToLinear(ColorABGR.unpackBlue(one)) * relativeWeightOne;
+
+        float twoR = ColorSRGB.srgbToLinear(ColorABGR.unpackRed(two)) * relativeWeightTwo;
+        float twoG = ColorSRGB.srgbToLinear(ColorABGR.unpackGreen(two)) * relativeWeightTwo;
+        float twoB = ColorSRGB.srgbToLinear(ColorABGR.unpackBlue(two)) * relativeWeightTwo;
+
+        // Combine the color components of each color
+        float linearR = oneR + twoR;
+        float linearG = oneG + twoG;
+        float linearB = oneB + twoB;
+
+        // Take the average alpha of both alpha values
+        int averageAlpha = (alphaOne + alphaTwo) >> 1;
+
+        // Convert to sRGB and pack the colors back into an integer.
+        return ColorSRGB.linearToSrgb(linearR, linearG, linearB, averageAlpha);
+    }
+
+    // Computes a non-weighted average of the two sRGB colors in linear space, avoiding brightness losses.
+    private static int averageRgb(int a, int b, int alpha) {
+        float ar = ColorSRGB.srgbToLinear(ColorABGR.unpackRed(a));
+        float ag = ColorSRGB.srgbToLinear(ColorABGR.unpackGreen(a));
+        float ab = ColorSRGB.srgbToLinear(ColorABGR.unpackBlue(a));
+
+        float br = ColorSRGB.srgbToLinear(ColorABGR.unpackRed(b));
+        float bg = ColorSRGB.srgbToLinear(ColorABGR.unpackGreen(b));
+        float bb = ColorSRGB.srgbToLinear(ColorABGR.unpackBlue(b));
+
+        return ColorSRGB.linearToSrgb((ar + br) * 0.5f, (ag + bg) * 0.5f, (ab + bb) * 0.5f, alpha);
     }
 }
