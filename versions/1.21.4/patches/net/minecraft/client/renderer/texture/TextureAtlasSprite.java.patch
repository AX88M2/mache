--- a/net/minecraft/client/renderer/texture/TextureAtlasSprite.java
+++ b/net/minecraft/client/renderer/texture/TextureAtlasSprite.java
@@ -1,11 +_,15 @@
 package net.minecraft.client.renderer.texture;
 
+import com.llamalad7.mixinextras.injector.wrapoperation.Operation;
+import com.llamalad7.mixinextras.injector.wrapoperation.WrapOperationRuntime;
 import com.mojang.blaze3d.vertex.VertexConsumer;
 import javax.annotation.Nullable;
+
+import net.caffeinemc.mods.sodium.client.render.chunk.compile.pipeline.TextureAtlasSpriteExtension;
 import net.minecraft.client.renderer.SpriteCoordinateExpander;
 import net.minecraft.resources.ResourceLocation;
 
-public class TextureAtlasSprite {
+public class TextureAtlasSprite implements TextureAtlasSpriteExtension {
     private final ResourceLocation atlasLocation;
     private final SpriteContents contents;
     final int x;
@@ -14,6 +_,7 @@
     private final float u1;
     private final float v0;
     private final float v1;
+    private boolean hasUnknownImageContents;
 
     protected TextureAtlasSprite(ResourceLocation atlasLocation, SpriteContents contents, int originX, int originY, int x, int y) {
         this.atlasLocation = atlasLocation;
@@ -48,7 +_,11 @@
 
     @Nullable
     public TextureAtlasSprite.Ticker createTicker() {
-        final SpriteTicker spriteTicker = this.contents.createTicker();
+        //final SpriteTicker spriteTicker = this.contents.createTicker();
+        SpriteTicker spriteTicker = this.wrapOperation$zee000$sodium$hookTickerInstantiation(this.contents, (var0) -> {
+            WrapOperationRuntime.checkArgumentCount(var0, 1, "[net.minecraft.client.renderer.texture.SpriteContents]");
+            return ((SpriteContents)var0[0]).createTicker();
+        });
         return spriteTicker != null ? new TextureAtlasSprite.Ticker() {
             @Override
             public void tickAndUpload() {
@@ -110,17 +_,36 @@
     }
 
     public float uvShrinkRatio() {
-        return 4.0F / this.atlasSize();
+        // Vanilla tries to apply a bias to texture coordinates to avoid texture bleeding (see FaceBakery#bakeQuad).
+        // This is counterproductive with Sodium's terrain rendering, since the bias is applied in the shader instead.
+        // Overwrite this method instead of adjusting its return value in FaceBakery as other mods may use it to
+        // manually apply the bias.
+        return 0.0f;
     }
 
     public VertexConsumer wrap(VertexConsumer consumer) {
         return new SpriteCoordinateExpander(consumer, this);
     }
 
+    @Override
+    public boolean sodium$hasUnknownImageContents() {
+        return this.hasUnknownImageContents;
+    }
+
     public interface Ticker extends AutoCloseable {
         void tickAndUpload();
 
         @Override
         void close();
+    }
+
+    private SpriteTicker wrapOperation$zee000$sodium$hookTickerInstantiation(SpriteContents instance, Operation<SpriteTicker> original) {
+        var ticker = original.call(instance);
+
+        if (ticker != null && !(ticker instanceof SpriteContents.Ticker)) {
+            this.hasUnknownImageContents = true;
+        }
+        
+        return ticker;
     }
 }
