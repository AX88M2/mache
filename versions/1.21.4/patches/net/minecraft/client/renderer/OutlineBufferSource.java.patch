--- a/net/minecraft/client/renderer/OutlineBufferSource.java
+++ b/net/minecraft/client/renderer/OutlineBufferSource.java
@@ -1,10 +_,14 @@
 package net.minecraft.client.renderer;
 
-import com.mojang.blaze3d.vertex.ByteBufferBuilder;
-import com.mojang.blaze3d.vertex.VertexConsumer;
-import com.mojang.blaze3d.vertex.VertexMultiConsumer;
+import com.mojang.blaze3d.vertex.*;
+
 import java.util.Optional;
+
+import net.caffeinemc.mods.sodium.api.util.ColorARGB;
+import net.caffeinemc.mods.sodium.api.vertex.attributes.common.ColorAttribute;
+import net.caffeinemc.mods.sodium.api.vertex.buffer.VertexBufferWriter;
 import net.minecraft.util.ARGB;
+import org.lwjgl.system.MemoryStack;
 
 public class OutlineBufferSource implements MultiBufferSource {
     private final MultiBufferSource.BufferSource bufferSource;
@@ -49,9 +_,9 @@
         this.outlineBufferSource.endBatch();
     }
 
-    record EntityOutlineGenerator(VertexConsumer delegate, int color) implements VertexConsumer {
+    record EntityOutlineGenerator(VertexConsumer delegate, int color, boolean canUseIntrinsics) implements VertexConsumer, VertexBufferWriter {
         public EntityOutlineGenerator(VertexConsumer delegate, int defaultR, int defaultG, int defaultB, int defaultA) {
-            this(delegate, ARGB.color(defaultA, defaultR, defaultG, defaultB));
+            this(delegate, ARGB.color(defaultA, defaultR, defaultG, defaultB), VertexBufferWriter.tryOf(delegate) != null);
         }
 
         @Override
@@ -70,7 +_,12 @@
             this.delegate.setUv(u, v);
             return this;
         }
-
+        
+        @Override
+        public boolean canUseIntrinsics() {
+            return this.canUseIntrinsics;
+        }
+        
         @Override
         public VertexConsumer setUv1(int u, int v) {
             return this;
@@ -84,6 +_,34 @@
         @Override
         public VertexConsumer setNormal(float normalX, float normalY, float normalZ) {
             return this;
+        }
+
+        @Override
+        public void push(MemoryStack stack, long ptr, int count, VertexFormat format) {
+            transform(ptr, count, format,
+                    this.color);
+
+            VertexBufferWriter.of(this.delegate)
+                    .push(stack, ptr, count, format);
+        }
+
+        /**
+         * Transforms the color element of each vertex to use the specified value.
+         *
+         * @param ptr    The buffer of vertices to transform
+         * @param count  The number of vertices to transform
+         * @param format The format of the vertices
+         * @param color  The packed color to use for transforming the vertices
+         */
+        private static void transform(long ptr, int count, VertexFormat format,
+                                      int color) {
+            long stride = format.getVertexSize();
+            long offsetColor = format.getOffset(VertexFormatElement.COLOR);
+
+            for (int vertexIndex = 0; vertexIndex < count; vertexIndex++) {
+                ColorAttribute.set(ptr + offsetColor, ColorARGB.toABGR(color));
+                ptr += stride;
+            }
         }
     }
 }
