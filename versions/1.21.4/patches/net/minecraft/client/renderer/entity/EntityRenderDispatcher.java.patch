--- a/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
+++ b/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
@@ -6,6 +_,12 @@
 import java.util.Map;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
+
+import net.caffeinemc.mods.sodium.api.math.MatrixHelper;
+import net.caffeinemc.mods.sodium.api.util.ColorABGR;
+import net.caffeinemc.mods.sodium.api.vertex.buffer.VertexBufferWriter;
+import net.caffeinemc.mods.sodium.api.vertex.format.common.EntityVertex;
+import net.caffeinemc.mods.sodium.client.render.vertex.VertexConsumerUtils;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
@@ -35,6 +_,7 @@
 import net.minecraft.client.resources.model.ModelBakery;
 import net.minecraft.client.server.IntegratedServer;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.packs.resources.ResourceManager;
@@ -55,8 +_,11 @@
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.joml.Matrix4f;
 import org.joml.Quaternionf;
 import org.joml.Vector3f;
+import org.lwjgl.system.MemoryStack;
+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
 
 public class EntityRenderDispatcher implements ResourceManagerReloadListener {
     private static final RenderType SHADOW_RENDER_TYPE = RenderType.entityShadow(ResourceLocation.withDefaultNamespace("textures/misc/shadow.png"));
@@ -79,6 +_,7 @@
     private final EquipmentAssetManager equipmentAssets;
     private boolean shouldRenderShadow = true;
     private boolean renderHitBoxes;
+    private static final int SHADOW_COLOR = ColorABGR.pack(1.0f, 1.0f, 1.0f);
 
     public <E extends Entity> int getPackedLightCoords(E entity, float partialTicks) {
         return this.getRenderer(entity).getPackedLightCoords(entity, partialTicks);
@@ -376,39 +_,43 @@
     private static void renderBlockShadow(
         PoseStack.Pose pose, VertexConsumer buffer, ChunkAccess chunk, LevelReader level, BlockPos pos, double x, double y, double z, float size, float weight
     ) {
-        BlockPos blockPos = pos.below();
-        BlockState blockState = chunk.getBlockState(blockPos);
-        if (blockState.getRenderShape() != RenderShape.INVISIBLE && level.getMaxLocalRawBrightness(pos) > 3) {
-            if (blockState.isCollisionShapeFullBlock(chunk, blockPos)) {
-                VoxelShape shape = blockState.getShape(chunk, blockPos);
-                if (!shape.isEmpty()) {
-                    float brightness = LightTexture.getBrightness(level.dimensionType(), level.getMaxLocalRawBrightness(pos));
-                    float f = weight * 0.5F * brightness;
-                    if (f >= 0.0F) {
-                        if (f > 1.0F) {
-                            f = 1.0F;
-                        }
+        CallbackInfo callbackInfo39 = new CallbackInfo("renderBlockShadow", true);
+        handler$zda000$sodium$renderShadowPartFast(pose, buffer, chunk, level, pos, x, y, z, size, weight, callbackInfo39);
+        if (!callbackInfo39.isCancelled()){
+            BlockPos blockPos = pos.below();
+            BlockState blockState = chunk.getBlockState(blockPos);
+            if (blockState.getRenderShape() != RenderShape.INVISIBLE && level.getMaxLocalRawBrightness(pos) > 3) {
+                if (blockState.isCollisionShapeFullBlock(chunk, blockPos)) {
+                    VoxelShape shape = blockState.getShape(chunk, blockPos);
+                    if (!shape.isEmpty()) {
+                        float brightness = LightTexture.getBrightness(level.dimensionType(), level.getMaxLocalRawBrightness(pos));
+                        float f = weight * 0.5F * brightness;
+                        if (f >= 0.0F) {
+                            if (f > 1.0F) {
+                                f = 1.0F;
+                            }
 
-                        int i = ARGB.color(Mth.floor(f * 255.0F), 255, 255, 255);
-                        AABB aabb = shape.bounds();
-                        double d = pos.getX() + aabb.minX;
-                        double d1 = pos.getX() + aabb.maxX;
-                        double d2 = pos.getY() + aabb.minY;
-                        double d3 = pos.getZ() + aabb.minZ;
-                        double d4 = pos.getZ() + aabb.maxZ;
-                        float f1 = (float)(d - x);
-                        float f2 = (float)(d1 - x);
-                        float f3 = (float)(d2 - y);
-                        float f4 = (float)(d3 - z);
-                        float f5 = (float)(d4 - z);
-                        float f6 = -f1 / 2.0F / size + 0.5F;
-                        float f7 = -f2 / 2.0F / size + 0.5F;
-                        float f8 = -f4 / 2.0F / size + 0.5F;
-                        float f9 = -f5 / 2.0F / size + 0.5F;
-                        shadowVertex(pose, buffer, i, f1, f3, f4, f6, f8);
-                        shadowVertex(pose, buffer, i, f1, f3, f5, f6, f9);
-                        shadowVertex(pose, buffer, i, f2, f3, f5, f7, f9);
-                        shadowVertex(pose, buffer, i, f2, f3, f4, f7, f8);
+                            int i = ARGB.color(Mth.floor(f * 255.0F), 255, 255, 255);
+                            AABB aabb = shape.bounds();
+                            double d = pos.getX() + aabb.minX;
+                            double d1 = pos.getX() + aabb.maxX;
+                            double d2 = pos.getY() + aabb.minY;
+                            double d3 = pos.getZ() + aabb.minZ;
+                            double d4 = pos.getZ() + aabb.maxZ;
+                            float f1 = (float)(d - x);
+                            float f2 = (float)(d1 - x);
+                            float f3 = (float)(d2 - y);
+                            float f4 = (float)(d3 - z);
+                            float f5 = (float)(d4 - z);
+                            float f6 = -f1 / 2.0F / size + 0.5F;
+                            float f7 = -f2 / 2.0F / size + 0.5F;
+                            float f8 = -f4 / 2.0F / size + 0.5F;
+                            float f9 = -f5 / 2.0F / size + 0.5F;
+                            shadowVertex(pose, buffer, i, f1, f3, f4, f6, f8);
+                            shadowVertex(pose, buffer, i, f1, f3, f5, f6, f9);
+                            shadowVertex(pose, buffer, i, f2, f3, f5, f7, f9);
+                            shadowVertex(pose, buffer, i, f2, f3, f4, f7, f8);
+                        }
                     }
                 }
             }
@@ -457,5 +_,80 @@
         );
         this.renderers = EntityRenderers.createEntityRenderers(context);
         this.playerRenderers = EntityRenderers.createPlayerRenderers(context);
+    }
+    
+    private static void writeShadowVertex(long ptr, Matrix4f matPosition, float x, float y, float z, float u, float v, int color, int normal) {
+        // The transformed position vector
+        float xt = MatrixHelper.transformPositionX(matPosition, x, y, z);
+        float yt = MatrixHelper.transformPositionY(matPosition, x, y, z);
+        float zt = MatrixHelper.transformPositionZ(matPosition, x, y, z);
+
+        EntityVertex.write(ptr, xt, yt, zt, color, u, v, LightTexture.FULL_BRIGHT, OverlayTexture.NO_OVERLAY, normal);
+    }
+    
+    private static void renderShadowPart(PoseStack.Pose matrices, VertexBufferWriter writer, float radius, float alpha, float minX, float maxX, float minY, float minZ, float maxZ) {
+        float size = 0.5F * (1.0F / radius);
+
+        float u1 = (-minX * size) + 0.5F;
+        float u2 = (-maxX * size) + 0.5F;
+
+        float v1 = (-minZ * size) + 0.5F;
+        float v2 = (-maxZ * size) + 0.5F;
+
+        var matNormal = matrices.normal();
+        var matPosition = matrices.pose();
+
+        var color = ColorABGR.withAlpha(SHADOW_COLOR, alpha);
+        var normal = MatrixHelper.transformNormal(matNormal, matrices.trustedNormals, Direction.UP);
+
+        try (MemoryStack stack = MemoryStack.stackPush()) {
+            long buffer = stack.nmalloc(4 * EntityVertex.STRIDE);
+            long ptr = buffer;
+
+            writeShadowVertex(ptr, matPosition, minX, minY, minZ, u1, v1, color, normal);
+            ptr += EntityVertex.STRIDE;
+
+            writeShadowVertex(ptr, matPosition, minX, minY, maxZ, u1, v2, color, normal);
+            ptr += EntityVertex.STRIDE;
+
+            writeShadowVertex(ptr, matPosition, maxX, minY, maxZ, u2, v2, color, normal);
+            ptr += EntityVertex.STRIDE;
+
+            writeShadowVertex(ptr, matPosition, maxX, minY, minZ, u2, v1, color, normal);
+            ptr += EntityVertex.STRIDE;
+
+            writer.push(stack, buffer, 4, EntityVertex.FORMAT);
+        }
+    }
+    private static void handler$zda000$sodium$renderShadowPartFast(PoseStack.Pose matrices, VertexConsumer vertices, ChunkAccess chunk, LevelReader level, BlockPos pos, double x, double y, double z, float radius, float opacity, CallbackInfo ci) {
+        VertexBufferWriter writer = VertexConsumerUtils.convertOrLog(vertices);
+        if (writer != null) {
+            ci.cancel();
+            BlockPos blockPos = pos.below();
+            BlockState blockState = level.getBlockState(blockPos);
+            if (blockState.getRenderShape() != RenderShape.INVISIBLE && blockState.isCollisionShapeFullBlock(level, blockPos)) {
+                int light = level.getMaxLocalRawBrightness(pos);
+                if (light > 3) {
+                    VoxelShape voxelShape = blockState.getShape(level, blockPos);
+                    if (!voxelShape.isEmpty()) {
+                        float brightness = LightTexture.getBrightness(level.dimensionType(), light);
+                        float alpha = (float)(((double)opacity - (y - (double)pos.getY()) / (double)2.0F) * (double)0.5F * (double)brightness);
+                        if (alpha >= 0.0F) {
+                            if (alpha > 1.0F) {
+                                alpha = 1.0F;
+                            }
+
+                            AABB box = voxelShape.bounds();
+                            float minX = (float)((double)pos.getX() + box.minX - x);
+                            float maxX = (float)((double)pos.getX() + box.maxX - x);
+                            float minY = (float)((double)pos.getY() + box.minY - y);
+                            float minZ = (float)((double)pos.getZ() + box.minZ - z);
+                            float maxZ = (float)((double)pos.getZ() + box.maxZ - z);
+                            renderShadowPart(matrices, writer, radius, alpha, minX, maxX, minY, minZ, maxZ);
+                        }
+                    }
+                }
+            }
+        }
     }
 }
