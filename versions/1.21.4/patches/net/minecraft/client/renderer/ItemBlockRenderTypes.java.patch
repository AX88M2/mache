--- a/net/minecraft/client/renderer/ItemBlockRenderTypes.java
+++ b/net/minecraft/client/renderer/ItemBlockRenderTypes.java
@@ -2,7 +_,11 @@
 
 import com.google.common.collect.Maps;
 import java.util.Map;
+
+import it.unimi.dsi.fastutil.objects.Reference2ReferenceOpenHashMap;
+import net.caffeinemc.mods.sodium.client.SodiumClientMod;
 import net.minecraft.Util;
+import net.minecraft.client.GraphicsStatus;
 import net.minecraft.world.item.BlockItem;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.block.Block;
@@ -14,7 +_,7 @@
 import net.minecraft.world.level.material.Fluids;
 
 public class ItemBlockRenderTypes {
-    private static final Map<Block, RenderType> TYPE_BY_BLOCK = Util.make(Maps.newHashMap(), renderTypeByBlock -> {
+    private static Map<Block, RenderType> TYPE_BY_BLOCK = Util.make(Maps.newHashMap(), renderTypeByBlock -> {
         RenderType renderType = RenderType.tripwire();
         renderTypeByBlock.put(Blocks.TRIPWIRE, renderType);
         RenderType renderType1 = RenderType.cutoutMipped();
@@ -341,17 +_,18 @@
         renderTypeByBlock.put(Blocks.BUBBLE_COLUMN, renderType3);
         renderTypeByBlock.put(Blocks.TINTED_GLASS, renderType3);
     });
-    private static final Map<Fluid, RenderType> TYPE_BY_FLUID = Util.make(Maps.newHashMap(), renderTypeByFluid -> {
+    private static Map<Fluid, RenderType> TYPE_BY_FLUID = Util.make(Maps.newHashMap(), renderTypeByFluid -> {
         RenderType renderType = RenderType.translucent();
         renderTypeByFluid.put(Fluids.FLOWING_WATER, renderType);
         renderTypeByFluid.put(Fluids.WATER, renderType);
     });
     private static boolean renderCutout;
+    private static boolean leavesFancy;
 
     public static RenderType getChunkRenderType(BlockState state) {
         Block block = state.getBlock();
         if (block instanceof LeavesBlock) {
-            return renderCutout ? RenderType.cutoutMipped() : RenderType.solid();
+            return leavesFancy ? RenderType.cutoutMipped() : RenderType.solid();
         } else {
             RenderType renderType = TYPE_BY_BLOCK.get(block);
             return renderType != null ? renderType : RenderType.solid();
@@ -361,7 +_,7 @@
     public static RenderType getMovingBlockRenderType(BlockState state) {
         Block block = state.getBlock();
         if (block instanceof LeavesBlock) {
-            return renderCutout ? RenderType.cutoutMipped() : RenderType.solid();
+            return leavesFancy ? RenderType.cutoutMipped() : RenderType.solid();
         } else {
             RenderType renderType = TYPE_BY_BLOCK.get(block);
             if (renderType != null) {
@@ -393,5 +_,12 @@
 
     public static void setFancy(boolean fancy) {
         renderCutout = fancy;
+        leavesFancy = SodiumClientMod.options().quality.leavesQuality.isFancy(fancy ? GraphicsStatus.FANCY : GraphicsStatus.FAST);
+    }
+    
+    static {
+        // Replace the backing collection types with something a bit faster, since this is a hot spot in chunk rendering.
+        TYPE_BY_BLOCK = new Reference2ReferenceOpenHashMap<>(TYPE_BY_BLOCK);
+        TYPE_BY_FLUID = new Reference2ReferenceOpenHashMap<>(TYPE_BY_FLUID);
     }
 }
