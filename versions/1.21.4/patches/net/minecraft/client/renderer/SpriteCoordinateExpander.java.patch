--- a/net/minecraft/client/renderer/SpriteCoordinateExpander.java
+++ b/net/minecraft/client/renderer/SpriteCoordinateExpander.java
@@ -1,15 +_,32 @@
 package net.minecraft.client.renderer;
 
 import com.mojang.blaze3d.vertex.VertexConsumer;
+import com.mojang.blaze3d.vertex.VertexFormat;
+import com.mojang.blaze3d.vertex.VertexFormatElement;
+import net.caffeinemc.mods.sodium.api.vertex.attributes.common.TextureAttribute;
+import net.caffeinemc.mods.sodium.api.vertex.buffer.VertexBufferWriter;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
+import org.lwjgl.system.MemoryStack;
 
-public class SpriteCoordinateExpander implements VertexConsumer {
+public class SpriteCoordinateExpander implements VertexConsumer, VertexBufferWriter {
     private final VertexConsumer delegate;
     private final TextureAtlasSprite sprite;
 
+    private boolean canUseIntrinsics;
+    private float minU, minV;
+    private float maxU, maxV;
+    
     public SpriteCoordinateExpander(VertexConsumer delegate, TextureAtlasSprite sprite) {
         this.delegate = delegate;
         this.sprite = sprite;
+        
+        this.minU = sprite.getU0();
+        this.minV = sprite.getV0();
+
+        this.maxU = sprite.getU1();
+        this.maxV = sprite.getV1();
+
+        this.canUseIntrinsics = VertexBufferWriter.tryOf(this.delegate) != null;
     }
 
     @Override
@@ -47,5 +_,55 @@
         float x, float y, float z, int color, float u, float v, int packedOverlay, int packedLight, float normalX, float normalY, float normalZ
     ) {
         this.delegate.addVertex(x, y, z, color, this.sprite.getU(u), this.sprite.getV(v), packedOverlay, packedLight, normalX, normalY, normalZ);
+    }
+
+    @Override
+    public void push(MemoryStack stack, long ptr, int count, VertexFormat format) {
+        transform(ptr, count, format,
+                this.minU, this.minV, this.maxU, this.maxV);
+
+        VertexBufferWriter.of(this.delegate)
+                .push(stack, ptr, count, format);
+    }
+
+    @Override
+    public boolean canUseIntrinsics() {
+        return this.canUseIntrinsics;
+    }
+
+    /**
+     * Transforms the texture UVs for each vertex from their absolute coordinates into the sprite area specified
+     * by the parameters.
+     *
+     * @param ptr    The buffer of vertices to transform
+     * @param count  The number of vertices to transform
+     * @param format The format of the vertices
+     * @param minU   The minimum X-coordinate of the sprite bounds
+     * @param minV   The minimum Y-coordinate of the sprite bounds
+     * @param maxU   The maximum X-coordinate of the sprite bounds
+     * @param maxV   The maximum Y-coordinate of the sprite bounds
+     */
+    private static void transform(long ptr, int count, VertexFormat format,
+                                  float minU, float minV, float maxU, float maxV) {
+        long stride = format.getVertexSize();
+        long offsetUV = format.getOffset(VertexFormatElement.UV0);
+
+        // The width/height of the sprite
+        float w = maxU - minU;
+        float h = maxV - minV;
+
+        for (int vertexIndex = 0; vertexIndex < count; vertexIndex++) {
+            // The texture coordinates relative to the sprite bounds
+            float u = TextureAttribute.getU(ptr + offsetUV);
+            float v = TextureAttribute.getV(ptr + offsetUV);
+
+            // The texture coordinates in absolute space on the sprite sheet
+            float ut = minU + (w * u);
+            float vt = minV + (h * v);
+
+            TextureAttribute.put(ptr + offsetUV, ut, vt);
+
+            ptr += stride;
+        }
     }
 }
