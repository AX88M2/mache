--- a/net/minecraft/client/renderer/block/model/BakedQuad.java
+++ b/net/minecraft/client/renderer/block/model/BakedQuad.java
@@ -1,16 +_,24 @@
 package net.minecraft.client.renderer.block.model;
 
+import net.caffeinemc.mods.sodium.client.model.quad.BakedQuadView;
+import net.caffeinemc.mods.sodium.client.model.quad.properties.ModelQuadFacing;
+import net.caffeinemc.mods.sodium.client.model.quad.properties.ModelQuadFlags;
+import net.caffeinemc.mods.sodium.client.util.ModelQuadUtil;
+import net.minecraft.client.renderer.LightTexture;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.core.Direction;
 
-public class BakedQuad {
+public class BakedQuad implements BakedQuadView {
     protected final int[] vertices;
     protected final int tintIndex;
     protected final Direction direction;
     protected final TextureAtlasSprite sprite;
     private final boolean shade;
     private final int lightEmission;
-
+    private int flags;
+    private int normal;
+    private ModelQuadFacing normalFace = null;
+    
     public BakedQuad(int[] verticies, int tintIndex, Direction direction, TextureAtlasSprite sprite, boolean shade, int lightEmission) {
         this.vertices = verticies;
         this.tintIndex = tintIndex;
@@ -18,11 +_,26 @@
         this.sprite = sprite;
         this.shade = shade;
         this.lightEmission = lightEmission;
+
+        this.normal = this.calculateNormal();
+        this.normalFace = ModelQuadFacing.fromPackedNormal(this.normal);
+
+        this.flags = ModelQuadFlags.getQuadFlags(this, direction);
     }
 
     public TextureAtlasSprite getSprite() {
         return this.sprite;
     }
+    
+    @Override
+    public Direction getLightFace() {
+        return this.direction;
+    }
+
+    @Override
+    public int getMaxLightQuad(int idx) {
+        return LightTexture.lightCoordsWithEmission(getLight(idx), getLightEmission());
+    }
 
     public int[] getVertices() {
         return this.vertices;
@@ -32,10 +_,11 @@
         return this.tintIndex != -1;
     }
 
+    @Override
     public int getTintIndex() {
         return this.tintIndex;
     }
-
+    
     public Direction getDirection() {
         return this.direction;
     }
@@ -46,5 +_,70 @@
 
     public int getLightEmission() {
         return this.lightEmission;
+    }
+
+    @Override
+    public float getX(int idx) {
+        return Float.intBitsToFloat(this.vertices[ModelQuadUtil.vertexOffset(idx) + ModelQuadUtil.POSITION_INDEX]);
+    }
+
+    @Override
+    public float getY(int idx) {
+        return Float.intBitsToFloat(this.vertices[ModelQuadUtil.vertexOffset(idx) + ModelQuadUtil.POSITION_INDEX + 1]);
+    }
+
+    @Override
+    public float getZ(int idx) {
+        return Float.intBitsToFloat(this.vertices[ModelQuadUtil.vertexOffset(idx) + ModelQuadUtil.POSITION_INDEX + 2]);
+    }
+
+    @Override
+    public int getColor(int idx) {
+        return this.vertices[ModelQuadUtil.vertexOffset(idx) + ModelQuadUtil.COLOR_INDEX];
+    }
+
+    @Override
+    public int getVertexNormal(int idx) {
+        return this.vertices[ModelQuadUtil.vertexOffset(idx) + ModelQuadUtil.NORMAL_INDEX];
+    }
+
+    @Override
+    public int getLight(int idx) {
+        return this.vertices[ModelQuadUtil.vertexOffset(idx) + ModelQuadUtil.LIGHT_INDEX];
+    }
+
+    @Override
+    public float getTexU(int idx) {
+        return Float.intBitsToFloat(this.vertices[ModelQuadUtil.vertexOffset(idx) + ModelQuadUtil.TEXTURE_INDEX]);
+    }
+
+    @Override
+    public float getTexV(int idx) {
+        return Float.intBitsToFloat(this.vertices[ModelQuadUtil.vertexOffset(idx) + ModelQuadUtil.TEXTURE_INDEX + 1]);
+    }
+
+    @Override
+    public int getFlags() {
+        return this.flags;
+    }
+
+    @Override
+    public ModelQuadFacing getNormalFace() {
+        return this.normalFace;
+    }
+
+    @Override
+    public int getFaceNormal() {
+        return this.normal;
+    }
+
+    @Override
+    public boolean hasShade() {
+        return this.shade;
+    }
+
+    @Override
+    public boolean hasAO() {
+        return true;
     }
 }
