--- a/net/minecraft/client/renderer/MultiBufferSource.java
+++ b/net/minecraft/client/renderer/MultiBufferSource.java
@@ -1,11 +_,12 @@
 package net.minecraft.client.renderer;
 
 import com.mojang.blaze3d.systems.RenderSystem;
-import com.mojang.blaze3d.vertex.BufferBuilder;
-import com.mojang.blaze3d.vertex.ByteBufferBuilder;
-import com.mojang.blaze3d.vertex.MeshData;
-import com.mojang.blaze3d.vertex.VertexConsumer;
+import com.mojang.blaze3d.vertex.*;
 import it.unimi.dsi.fastutil.objects.Object2ObjectSortedMaps;
+import net.caffeinemc.mods.sodium.client.util.sorting.VertexSorters;
+import net.caffeinemc.mods.sodium.client.util.sorting.VertexSortingExtended;
+import org.lwjgl.system.MemoryUtil;
+
 import java.util.HashMap;
 import java.util.Map;
 import java.util.SequencedMap;
@@ -28,6 +_,7 @@
         protected final Map<RenderType, BufferBuilder> startedBuilders = new HashMap<>();
         @Nullable
         protected RenderType lastSharedType;
+        private static final int VERTICES_PER_QUAD = 6;
 
         protected BufferSource(ByteBufferBuilder sharedBuffer, SequencedMap<RenderType, ByteBufferBuilder> fixedBuffers) {
             this.sharedBuffer = sharedBuffer;
@@ -89,7 +_,13 @@
             if (meshData != null) {
                 if (renderType.sortOnUpload()) {
                     ByteBufferBuilder byteBufferBuilder = this.fixedBuffers.getOrDefault(renderType, this.sharedBuffer);
-                    meshData.sortQuads(byteBufferBuilder, RenderSystem.getProjectionType().vertexSorting());
+                    var sorting = RenderSystem.getProjectionType().vertexSorting();
+                    if (sorting instanceof VertexSortingExtended sortingExtended) {
+                        var sortedPrimitiveIds = VertexSorters.sort(meshData.vertexBuffer(), meshData.drawState().vertexCount(), meshData.drawState().format().getVertexSize(), sortingExtended);
+                        meshData.indexBuffer = buildSortedIndexBuffer(meshData, byteBufferBuilder, sortedPrimitiveIds);
+                    } else {
+                        meshData.sortQuads(byteBufferBuilder, RenderSystem.getProjectionType().vertexSorting());
+                    }
                 }
 
                 renderType.draw(meshData);
@@ -97,6 +_,43 @@
 
             if (renderType.equals(this.lastSharedType)) {
                 this.lastSharedType = null;
+            }
+        }
+        
+        private static ByteBufferBuilder.Result buildSortedIndexBuffer(MeshData meshData, ByteBufferBuilder bufferBuilder, int[] primitiveIds) {
+            final var indexType = meshData.drawState().indexType();
+            final var ptr = bufferBuilder.reserve((primitiveIds.length * VERTICES_PER_QUAD) * indexType.bytes);
+
+            if (indexType == VertexFormat.IndexType.SHORT) {
+                writeShortIndexBuffer(ptr, primitiveIds);
+            } else if (indexType == VertexFormat.IndexType.INT) {
+                writeIntIndexBuffer(ptr, primitiveIds);
+            }
+
+            return bufferBuilder.build();
+        }
+        
+        private static void writeIntIndexBuffer(long ptr, int[] primitiveIds) {
+            for (int primitiveId : primitiveIds) {
+                MemoryUtil.memPutInt(ptr +  0L, (primitiveId * 4) + 0);
+                MemoryUtil.memPutInt(ptr +  4L, (primitiveId * 4) + 1);
+                MemoryUtil.memPutInt(ptr +  8L, (primitiveId * 4) + 2);
+                MemoryUtil.memPutInt(ptr + 12L, (primitiveId * 4) + 2);
+                MemoryUtil.memPutInt(ptr + 16L, (primitiveId * 4) + 3);
+                MemoryUtil.memPutInt(ptr + 20L, (primitiveId * 4) + 0);
+                ptr += 24L;
+            }
+        }
+
+        private static void writeShortIndexBuffer(long ptr, int[] primitiveIds) {
+            for (int primitiveId : primitiveIds) {
+                MemoryUtil.memPutShort(ptr +  0L, (short) ((primitiveId * 4) + 0));
+                MemoryUtil.memPutShort(ptr +  2L, (short) ((primitiveId * 4) + 1));
+                MemoryUtil.memPutShort(ptr +  4L, (short) ((primitiveId * 4) + 2));
+                MemoryUtil.memPutShort(ptr +  6L, (short) ((primitiveId * 4) + 2));
+                MemoryUtil.memPutShort(ptr +  8L, (short) ((primitiveId * 4) + 3));
+                MemoryUtil.memPutShort(ptr + 10L, (short) ((primitiveId * 4) + 0));
+                ptr += 12L;
             }
         }
     }
