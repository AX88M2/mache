--- a/net/minecraft/client/model/geom/ModelPart.java
+++ b/net/minecraft/client/model/geom/ModelPart.java
@@ -7,12 +_,20 @@
 import java.util.NoSuchElementException;
 import java.util.Set;
 import java.util.stream.Stream;
+
+import net.caffeinemc.mods.sodium.api.math.MatrixHelper;
+import net.caffeinemc.mods.sodium.api.util.ColorARGB;
+import net.caffeinemc.mods.sodium.api.vertex.buffer.VertexBufferWriter;
+import net.caffeinemc.mods.sodium.client.render.immediate.model.EntityRenderer;
+import net.caffeinemc.mods.sodium.client.render.immediate.model.ModelCuboid;
+import net.caffeinemc.mods.sodium.client.render.vertex.VertexConsumerUtils;
 import net.minecraft.core.Direction;
 import net.minecraft.util.RandomSource;
 import org.joml.Matrix3f;
 import org.joml.Matrix4f;
 import org.joml.Quaternionf;
 import org.joml.Vector3f;
+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
 
 public final class ModelPart {
     public static final float DEFAULT_SCALE = 1.0F;
@@ -150,14 +_,17 @@
         }
     }
 
-    public void translateAndRotate(PoseStack poseStack) {
-        poseStack.translate(this.x / 16.0F, this.y / 16.0F, this.z / 16.0F);
+    public void translateAndRotate(PoseStack matrixStack) {
+        if (this.x != 0.0F || this.y != 0.0F || this.z != 0.0F) {
+            matrixStack.translate(this.x * (1.0f / 16.0f), this.y * (1.0f / 16.0f), this.z * (1.0f / 16.0f));
+        }
+
         if (this.xRot != 0.0F || this.yRot != 0.0F || this.zRot != 0.0F) {
-            poseStack.mulPose(new Quaternionf().rotationZYX(this.zRot, this.yRot, this.xRot));
+            MatrixHelper.rotateZYX(matrixStack.last(), this.zRot, this.yRot, this.xRot);
         }
 
         if (this.xScale != 1.0F || this.yScale != 1.0F || this.zScale != 1.0F) {
-            poseStack.scale(this.xScale, this.yScale, this.zScale);
+            matrixStack.scale(this.xScale, this.yScale, this.zScale);
         }
     }
 
@@ -205,6 +_,7 @@
         public final float maxX;
         public final float maxY;
         public final float maxZ;
+        private ModelCuboid sodium$cuboid;
 
         public Cube(
             int texCoordU,
@@ -223,6 +_,7 @@
             float texScaleV,
             Set<Direction> visibleFaces
         ) {
+            this.sodium$cuboid = new ModelCuboid(texCoordU, texCoordV, originX, originY, originZ, dimensionX, dimensionY, dimensionZ, gtowX, growY, growZ, mirror, texScaleU, texScaleV, visibleFaces);
             this.minX = originX;
             this.minY = originY;
             this.minZ = originZ;
@@ -301,22 +_,34 @@
         }
 
         public void compile(PoseStack.Pose pose, VertexConsumer buffer, int packedLight, int packedOverlay, int color) {
-            Matrix4f matrix4f = pose.pose();
-            Vector3f vector3f = new Vector3f();
-
-            for (ModelPart.Polygon polygon : this.polygons) {
-                Vector3f vector3f1 = pose.transformNormal(polygon.normal, vector3f);
-                float x = vector3f1.x();
-                float y = vector3f1.y();
-                float z = vector3f1.z();
-
-                for (ModelPart.Vertex vertex : polygon.vertices) {
-                    float f = vertex.pos.x() / 16.0F;
-                    float f1 = vertex.pos.y() / 16.0F;
-                    float f2 = vertex.pos.z() / 16.0F;
-                    Vector3f vector3f2 = matrix4f.transformPosition(f, f1, f2, vector3f);
-                    buffer.addVertex(vector3f2.x(), vector3f2.y(), vector3f2.z(), color, vertex.u, vertex.v, packedOverlay, packedLight, x, y, z);
+            CallbackInfo callbackInfo24 = new CallbackInfo("compile", true);
+            this.handler$zco000$sodium$onCompile(pose, buffer, packedLight, packedOverlay, color, callbackInfo24);
+            if (!callbackInfo24.isCancelled()) {
+                Matrix4f matrix4f = pose.pose();
+                Vector3f vector3f = new Vector3f();
+
+                for (ModelPart.Polygon polygon : this.polygons) {
+                    Vector3f vector3f1 = pose.transformNormal(polygon.normal, vector3f);
+                    float x = vector3f1.x();
+                    float y = vector3f1.y();
+                    float z = vector3f1.z();
+
+                    for (ModelPart.Vertex vertex : polygon.vertices) {
+                        float f = vertex.pos.x() / 16.0F;
+                        float f1 = vertex.pos.y() / 16.0F;
+                        float f2 = vertex.pos.z() / 16.0F;
+                        Vector3f vector3f2 = matrix4f.transformPosition(f, f1, f2, vector3f);
+                        buffer.addVertex(vector3f2.x(), vector3f2.y(), vector3f2.z(), color, vertex.u, vertex.v, packedOverlay, packedLight, x, y, z);
+                    }
                 }
+            }
+        }
+        
+        private void handler$zco000$sodium$onCompile(PoseStack.Pose pose, VertexConsumer buffer, int light, int overlay, int color, CallbackInfo ci) {
+            VertexBufferWriter writer = VertexConsumerUtils.convertOrLog(buffer);
+            if (writer != null) {
+                ci.cancel();
+                EntityRenderer.renderCuboid(pose, writer, this.sodium$cuboid, light, overlay, ColorARGB.toABGR(color));
             }
         }
     }
