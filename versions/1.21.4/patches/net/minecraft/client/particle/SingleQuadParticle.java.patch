--- a/net/minecraft/client/particle/SingleQuadParticle.java
+++ b/net/minecraft/client/particle/SingleQuadParticle.java
@@ -1,16 +_,25 @@
 package net.minecraft.client.particle;
 
 import com.mojang.blaze3d.vertex.VertexConsumer;
+import net.caffeinemc.mods.sodium.api.util.ColorABGR;
+import net.caffeinemc.mods.sodium.api.vertex.buffer.VertexBufferWriter;
+import net.caffeinemc.mods.sodium.api.vertex.format.common.ParticleVertex;
+import net.caffeinemc.mods.sodium.client.render.vertex.VertexConsumerUtils;
 import net.minecraft.client.Camera;
 import net.minecraft.client.multiplayer.ClientLevel;
 import net.minecraft.util.Mth;
 import net.minecraft.world.phys.Vec3;
+import org.joml.Math;
 import org.joml.Quaternionf;
 import org.joml.Vector3f;
+import org.lwjgl.system.MemoryStack;
+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
 
 public abstract class SingleQuadParticle extends Particle {
     protected float quadSize = 0.1F * (this.random.nextFloat() * 0.5F + 0.5F) * 2.0F;
-
+    private static final Vector3f TEMP_LEFT = new Vector3f();
+    private static final Vector3f TEMP_UP = new Vector3f();
+    
     protected SingleQuadParticle(ClientLevel level, double x, double y, double z) {
         super(level, x, y, z);
     }
@@ -25,21 +_,29 @@
 
     @Override
     public void render(VertexConsumer buffer, Camera renderInfo, float partialTicks) {
-        Quaternionf quaternionf = new Quaternionf();
-        this.getFacingCameraMode().setRotation(quaternionf, renderInfo, partialTicks);
-        if (this.roll != 0.0F) {
-            quaternionf.rotateZ(Mth.lerp(partialTicks, this.oRoll, this.roll));
-        }
+        CallbackInfo callbackInfo5 = new CallbackInfo("render", true);
+        this.handler$zdi000$sodium$render(buffer, renderInfo, partialTicks, callbackInfo5);
+        if (!callbackInfo5.isCancelled()){
+            Quaternionf quaternionf = new Quaternionf();
+            this.getFacingCameraMode().setRotation(quaternionf, renderInfo, partialTicks);
+            if (this.roll != 0.0F) {
+                quaternionf.rotateZ(Mth.lerp(partialTicks, this.oRoll, this.roll));
+            }
 
-        this.renderRotatedQuad(buffer, renderInfo, quaternionf, partialTicks);
+            this.renderRotatedQuad(buffer, renderInfo, quaternionf, partialTicks);
+        }
     }
 
     protected void renderRotatedQuad(VertexConsumer buffer, Camera camera, Quaternionf quaternion, float partialTicks) {
-        Vec3 position = camera.getPosition();
-        float f = (float)(Mth.lerp((double)partialTicks, this.xo, this.x) - position.x());
-        float f1 = (float)(Mth.lerp((double)partialTicks, this.yo, this.y) - position.y());
-        float f2 = (float)(Mth.lerp((double)partialTicks, this.zo, this.z) - position.z());
-        this.renderRotatedQuad(buffer, quaternion, f, f1, f2, partialTicks);
+        CallbackInfo callbackInfo9 = new CallbackInfo("renderRotatedQuad", true);
+        this.handler$zdi000$sodium$renderRotatedQuad(buffer, camera, quaternion, partialTicks, callbackInfo9);
+        if (!callbackInfo9.isCancelled()){
+            Vec3 position = camera.getPosition();
+            float f = (float)(Mth.lerp((double)partialTicks, this.xo, this.x) - position.x());
+            float f1 = (float)(Mth.lerp((double)partialTicks, this.yo, this.y) - position.y());
+            float f2 = (float)(Mth.lerp((double)partialTicks, this.zo, this.z) - position.z());
+            this.renderRotatedQuad(buffer, quaternion, f, f1, f2, partialTicks);
+        }
     }
 
     protected void renderRotatedQuad(VertexConsumer buffer, Quaternionf quaternion, float x, float y, float z, float partialTicks) {
@@ -95,5 +_,103 @@
         SingleQuadParticle.FacingCameraMode LOOKAT_Y = (quaternion, camera, partialTick) -> quaternion.set(0.0F, camera.rotation().y, 0.0F, camera.rotation().w);
 
         void setRotation(Quaternionf quaternion, Camera camera, float partialTick);
+    }
+
+    protected void handler$zdi000$sodium$render(VertexConsumer vertexConsumer, Camera camera, float tickDelta, CallbackInfo ci) {
+        final var writer = VertexConsumerUtils.convertOrLog(vertexConsumer);
+
+        if (writer == null) {
+            return;
+        }
+
+        ci.cancel();
+
+        float size = this.getQuadSize(tickDelta);
+
+        Vector3f left = TEMP_LEFT;
+        left.set(camera.getLeftVector())
+                .mul(size);
+
+        Vector3f up = TEMP_UP;
+        up.set(camera.getUpVector())
+                .mul(size);
+
+        if (!Mth.equal(this.roll, 0.0f)) {
+            float roll = Mth.lerp(tickDelta, this.oRoll, this.roll);
+
+            float sinRoll = Math.sin(roll);
+            float cosRoll = Math.cosFromSin(sinRoll, roll);
+
+            float rv1x = Math.fma(cosRoll, left.x, sinRoll * up.x),
+                    rv1y = Math.fma(cosRoll, left.y, sinRoll * up.y),
+                    rv1z = Math.fma(cosRoll, left.z, sinRoll * up.z);
+
+            float rv2x = Math.fma(-sinRoll, left.x, cosRoll * up.x),
+                    rv2y = Math.fma(-sinRoll, left.y, cosRoll * up.y),
+                    rv2z = Math.fma(-sinRoll, left.z, cosRoll * up.z);
+
+            left.set(rv1x, rv1y, rv1z);
+            up.set(rv2x, rv2y, rv2z);
+        }
+
+        this.sodium$emitVertices(writer, camera.getPosition(), left, up, tickDelta);
+    }
+
+    protected void handler$zdi000$sodium$renderRotatedQuad(VertexConsumer vertexConsumer, Camera camera, Quaternionf quaternion, float tickDelta, CallbackInfo ci) {
+        final var writer = VertexConsumerUtils.convertOrLog(vertexConsumer);
+
+        if (writer == null) {
+            return;
+        }
+
+        ci.cancel();
+
+        float size = this.getQuadSize(tickDelta);
+
+        // Some particle class implementations may call this function directly, in which case we cannot assume anything
+        // about the transform being used. However, we can still extract the left/up vectors from the quaternion,
+        // it's just slightly slower than using the camera's left/up vectors directly.
+        Vector3f left = TEMP_LEFT;
+        left.set(-size, 0.0f, 0.0f)
+                .rotate(quaternion);
+
+        Vector3f up = TEMP_UP;
+        up.set(0.0f, size, 0.0f)
+                .rotate(quaternion);
+
+        this.sodium$emitVertices(writer, camera.getPosition(), left, up, tickDelta);
+    }
+    
+    private void sodium$emitVertices(VertexBufferWriter writer, Vec3 camera, Vector3f left, Vector3f up, float tickDelta) {
+        float minU = this.getU0();
+        float maxU = this.getU1();
+        float minV = this.getV0();
+        float maxV = this.getV1();
+
+        int light = this.getLightColor(tickDelta);
+        int color = ColorABGR.pack(this.rCol, this.gCol, this.bCol, this.alpha);
+
+        float x = (float) (Mth.lerp(tickDelta, this.xo, this.x) - camera.x());
+        float y = (float) (Mth.lerp(tickDelta, this.yo, this.y) - camera.y());
+        float z = (float) (Mth.lerp(tickDelta, this.zo, this.z) - camera.z());
+
+        try (MemoryStack stack = MemoryStack.stackPush()) {
+            long buffer = stack.nmalloc(4 * ParticleVertex.STRIDE);
+            long ptr = buffer;
+
+            ParticleVertex.put(ptr, -left.x - up.x + x, -left.y - up.y + y, -left.z - up.z + z, maxU, maxV, color, light);
+            ptr += ParticleVertex.STRIDE;
+
+            ParticleVertex.put(ptr, -left.x + up.x + x, -left.y + up.y + y, -left.z + up.z + z, maxU, minV, color, light);
+            ptr += ParticleVertex.STRIDE;
+
+            ParticleVertex.put(ptr, left.x + up.x + x, left.y + up.y + y, left.z + up.z + z, minU, minV, color, light);
+            ptr += ParticleVertex.STRIDE;
+
+            ParticleVertex.put(ptr, left.x - up.x + x, left.y - up.y + y, left.z - up.z + z, minU, maxV, color, light);
+            ptr += ParticleVertex.STRIDE;
+
+            writer.push(stack, buffer, 4, ParticleVertex.FORMAT);
+        }
     }
 }
