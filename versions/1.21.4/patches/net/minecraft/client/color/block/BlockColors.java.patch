--- a/net/minecraft/client/color/block/BlockColors.java
+++ b/net/minecraft/client/color/block/BlockColors.java
@@ -5,6 +_,9 @@
 import java.util.Map;
 import java.util.Set;
 import javax.annotation.Nullable;
+
+import it.unimi.dsi.fastutil.objects.*;
+import net.caffeinemc.mods.sodium.client.model.color.interop.BlockColorsExtension;
 import net.minecraft.client.renderer.BiomeColors;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.IdMapper;
@@ -23,13 +_,15 @@
 import net.minecraft.world.level.block.state.properties.Property;
 import net.minecraft.world.level.material.MapColor;
 
-public class BlockColors {
+public class BlockColors implements BlockColorsExtension {
     private static final int DEFAULT = -1;
     public static final int LILY_PAD_IN_WORLD = -14647248;
     public static final int LILY_PAD_DEFAULT = -9321636;
     private final IdMapper<BlockColor> blockColors = new IdMapper<>(32);
     private final Map<Block, Set<Property<?>>> coloringStates = Maps.newHashMap();
-
+    private final Reference2ReferenceMap<Block, BlockColor> blocksToColor = new Reference2ReferenceOpenHashMap<>();
+    private final ReferenceSet<Block> overridenBlocks = new ReferenceOpenHashSet<>();
+    
     public static BlockColors createDefault() {
         BlockColors blockColors = new BlockColors();
         blockColors.register(
@@ -121,5 +_,15 @@
 
     public Set<Property<?>> getColoringProperties(Block block) {
         return this.coloringStates.getOrDefault(block, ImmutableSet.of());
+    }
+
+    @Override
+    public Reference2ReferenceMap<Block, BlockColor> sodium$getProviders() {
+        return Reference2ReferenceMaps.unmodifiable(this.blocksToColor);
+    }
+
+    @Override
+    public ReferenceSet<Block> sodium$getOverridenVanillaBlocks() {
+        return ReferenceSets.unmodifiable(this.overridenBlocks);
     }
 }
