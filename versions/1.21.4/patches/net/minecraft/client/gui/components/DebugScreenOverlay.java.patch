--- a/net/minecraft/client/gui/components/DebugScreenOverlay.java
+++ b/net/minecraft/client/gui/components/DebugScreenOverlay.java
@@ -21,6 +_,12 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+
+import net.caffeinemc.mods.sodium.client.SodiumClientMod;
+import net.caffeinemc.mods.sodium.client.render.SodiumWorldRenderer;
+import net.caffeinemc.mods.sodium.client.util.MathUtil;
+import net.caffeinemc.mods.sodium.client.util.NativeBuffer;
+import net.fabricmc.fabric.api.renderer.v1.Renderer;
 import net.minecraft.ChatFormatting;
 import net.minecraft.SharedConstants;
 import net.minecraft.Util;
@@ -73,6 +_,8 @@
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.HitResult;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class DebugScreenOverlay {
     private static final int COLOR_GREY = 14737632;
@@ -87,6 +_,7 @@
         enumMap.put(Heightmap.Types.MOTION_BLOCKING, "M");
         enumMap.put(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, "ML");
     });
+    private static final Logger log = LoggerFactory.getLogger(DebugScreenOverlay.class);
     private final Minecraft minecraft;
     private final DebugScreenOverlay.AllocationRateCalculator allocationRateCalculator;
     private final Font font;
@@ -457,6 +_,7 @@
                 this.minecraft.getSoundManager().getDebugString()
                     + String.format(Locale.ROOT, " (Mood %d%%)", Math.round(this.minecraft.player.getCurrentMood() * 100.0F))
             );
+            list.add("[Fabric] Active renderer: " + Renderer.get().getClass().getSimpleName());
             return list;
         }
     }
@@ -530,8 +_,27 @@
                 GlUtil.getVendor()
             ),
             GlUtil.getRenderer(),
-            GlUtil.getOpenGLVersion()
+            GlUtil.getOpenGLVersion(),
+            "",
+            "%sSodium Renderer (%s)".formatted(getVersionColor(), SodiumClientMod.getVersion())
         );
+
+        var renderer = SodiumWorldRenderer.instanceNullable();
+
+        if (renderer != null) {
+            list.addAll(renderer.getDebugStrings());
+        }
+
+        for (int i = 0; i < list.size(); i++) {
+            String str = list.get(i);
+
+            if (str.startsWith("Allocated:")) {
+                list.add(i + 1, getNativeMemoryString());
+
+                break;
+            }
+        }
+        
         if (this.minecraft.showOnlyReducedInfo()) {
             return list;
         } else {
@@ -704,5 +_,28 @@
 
             return l;
         }
+    }
+
+    private static ChatFormatting getVersionColor() {
+        String version = SodiumClientMod.getVersion();
+        ChatFormatting color;
+
+        if (version.contains("-local")) {
+            color = ChatFormatting.RED;
+        } else if (version.contains("-snapshot")) {
+            color = ChatFormatting.LIGHT_PURPLE;
+        } else {
+            color = ChatFormatting.GREEN;
+        }
+
+        return color;
+    }
+    
+    private static String getNativeMemoryString() {
+        return "Off-Heap: +" + MathUtil.toMib(getNativeMemoryUsage()) + "MB";
+    }
+    
+    private static long getNativeMemoryUsage() {
+        return ManagementFactory.getMemoryMXBean().getNonHeapMemoryUsage().getUsed() + NativeBuffer.getTotalAllocated();
     }
 }
