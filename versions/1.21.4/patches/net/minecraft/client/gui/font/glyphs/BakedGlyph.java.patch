--- a/net/minecraft/client/gui/font/glyphs/BakedGlyph.java
+++ b/net/minecraft/client/gui/font/glyphs/BakedGlyph.java
@@ -1,11 +_,18 @@
 package net.minecraft.client.gui.font.glyphs;
 
 import com.mojang.blaze3d.vertex.VertexConsumer;
+import net.caffeinemc.mods.sodium.api.math.MatrixHelper;
+import net.caffeinemc.mods.sodium.api.util.ColorARGB;
+import net.caffeinemc.mods.sodium.api.vertex.buffer.VertexBufferWriter;
+import net.caffeinemc.mods.sodium.api.vertex.format.common.GlyphVertex;
+import net.caffeinemc.mods.sodium.client.render.vertex.VertexConsumerUtils;
 import net.minecraft.client.gui.Font;
 import net.minecraft.client.gui.font.GlyphRenderTypes;
 import net.minecraft.client.renderer.RenderType;
 import net.minecraft.network.chat.Style;
 import org.joml.Matrix4f;
+import org.lwjgl.system.MemoryStack;
+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
 
 public class BakedGlyph {
     public static final float Z_FIGHTER = 0.001F;
@@ -63,19 +_,60 @@
     }
 
     private void render(boolean italic, float x, float y, float z, Matrix4f pose, VertexConsumer buffer, int color, boolean bold, int packedLight) {
-        float f = x + this.left;
-        float f1 = x + this.right;
-        float f2 = y + this.up;
-        float f3 = y + this.down;
-        float f4 = italic ? 1.0F - 0.25F * this.up : 0.0F;
-        float f5 = italic ? 1.0F - 0.25F * this.down : 0.0F;
-        float f6 = bold ? 0.1F : 0.0F;
-        buffer.addVertex(pose, f + f4 - f6, f2 - f6, z).setColor(color).setUv(this.u0, this.v0).setLight(packedLight);
-        buffer.addVertex(pose, f + f5 - f6, f3 + f6, z).setColor(color).setUv(this.u0, this.v1).setLight(packedLight);
-        buffer.addVertex(pose, f1 + f5 + f6, f3 + f6, z).setColor(color).setUv(this.u1, this.v1).setLight(packedLight);
-        buffer.addVertex(pose, f1 + f4 + f6, f2 - f6, z).setColor(color).setUv(this.u1, this.v0).setLight(packedLight);
-    }
-
+        CallbackInfo callbackInfo17 = new CallbackInfo("render", true);
+        this.handler$zdd000$sodium$drawFast(italic, x, y, z, pose, buffer, color, bold, packedLight, callbackInfo17);
+        if (!callbackInfo17.isCancelled()){
+            float f = x + this.left;
+            float f1 = x + this.right;
+            float f2 = y + this.up;
+            float f3 = y + this.down;
+            float f4 = italic ? 1.0F - 0.25F * this.up : 0.0F;
+            float f5 = italic ? 1.0F - 0.25F * this.down : 0.0F;
+            float f6 = bold ? 0.1F : 0.0F;
+            buffer.addVertex(pose, f + f4 - f6, f2 - f6, z).setColor(color).setUv(this.u0, this.v0).setLight(packedLight);
+            buffer.addVertex(pose, f + f5 - f6, f3 + f6, z).setColor(color).setUv(this.u0, this.v1).setLight(packedLight);
+            buffer.addVertex(pose, f1 + f5 + f6, f3 + f6, z).setColor(color).setUv(this.u1, this.v1).setLight(packedLight);
+            buffer.addVertex(pose, f1 + f4 + f6, f2 - f6, z).setColor(color).setUv(this.u1, this.v0).setLight(packedLight);
+        }
+    }
+    private void handler$zdd000$sodium$drawFast(boolean italic, float x, float y, float z, Matrix4f matrix, VertexConsumer vertexConsumer, int c, boolean bl2, int light, CallbackInfo ci) {
+        var writer = VertexConsumerUtils.convertOrLog(vertexConsumer);
+
+        if (writer == null) {
+            return;
+        }
+
+        ci.cancel();
+
+        float x1 = x + this.left;
+        float x2 = x + this.right;
+        float h1 = y + this.up;
+        float h2 = y + this.down;
+        float w1 = italic ? 1.0F - 0.25F * this.up : 0.0F;
+        float w2 = italic ? 1.0F - 0.25F * this.down : 0.0F;
+        float offset = bl2 ? 0.1F : 0.0F;
+
+        int color = ColorARGB.toABGR(c);
+
+        try (MemoryStack stack = MemoryStack.stackPush()) {
+            long buffer = stack.nmalloc(4 * GlyphVertex.STRIDE);
+            long ptr = buffer;
+
+            write(ptr, matrix, x1 + w1 - offset, h1 - offset, z, color, this.u0, this.v0, light);
+            ptr += GlyphVertex.STRIDE;
+
+            write(ptr, matrix, x1 + w2 - offset, h2 + offset, z, color, this.u0, this.v1, light);
+            ptr += GlyphVertex.STRIDE;
+
+            write(ptr, matrix, x2 + w2 + offset, h2 + offset, z, color, this.u1, this.v1, light);
+            ptr += GlyphVertex.STRIDE;
+
+            write(ptr, matrix, x2 + w1 + offset, h1 - offset, z, color, this.u1, this.v0, light);
+            ptr += GlyphVertex.STRIDE;
+
+            writer.push(stack, buffer, 4, GlyphVertex.FORMAT);
+        }
+    }
     public void renderEffect(BakedGlyph.Effect effect, Matrix4f pose, VertexConsumer buffer, int packedLight) {
         if (effect.hasShadow()) {
             this.buildEffect(effect, effect.shadowOffset(), 0.0F, effect.shadowColor(), buffer, packedLight, pose);
@@ -85,25 +_,64 @@
         }
     }
 
-    private void buildEffect(
-        BakedGlyph.Effect effect, float shadowOffset, float depthOffset, int shadowColor, VertexConsumer buffer, int packedLight, Matrix4f pose
-    ) {
-        buffer.addVertex(pose, effect.x0 + shadowOffset, effect.y0 + shadowOffset, effect.depth + depthOffset)
-            .setColor(shadowColor)
-            .setUv(this.u0, this.v0)
-            .setLight(packedLight);
-        buffer.addVertex(pose, effect.x1 + shadowOffset, effect.y0 + shadowOffset, effect.depth + depthOffset)
-            .setColor(shadowColor)
-            .setUv(this.u0, this.v1)
-            .setLight(packedLight);
-        buffer.addVertex(pose, effect.x1 + shadowOffset, effect.y1 + shadowOffset, effect.depth + depthOffset)
-            .setColor(shadowColor)
-            .setUv(this.u1, this.v1)
-            .setLight(packedLight);
-        buffer.addVertex(pose, effect.x0 + shadowOffset, effect.y1 + shadowOffset, effect.depth + depthOffset)
-            .setColor(shadowColor)
-            .setUv(this.u1, this.v0)
-            .setLight(packedLight);
+    private void buildEffect(BakedGlyph.Effect effect, float shadowOffset, float depthOffset, int shadowColor, VertexConsumer buffer, int packedLight, Matrix4f pose) {
+        CallbackInfo callbackInfo8 = new CallbackInfo("buildEffect", true);
+        this.handler$zdd000$sodium$drawEffectFast(effect, shadowOffset, depthOffset, shadowColor, buffer, packedLight, pose, callbackInfo8);
+        if (!callbackInfo8.isCancelled()){
+            buffer.addVertex(pose, effect.x0 + shadowOffset, effect.y0 + shadowOffset, effect.depth + depthOffset)
+                    .setColor(shadowColor)
+                    .setUv(this.u0, this.v0)
+                    .setLight(packedLight);
+            buffer.addVertex(pose, effect.x1 + shadowOffset, effect.y0 + shadowOffset, effect.depth + depthOffset)
+                    .setColor(shadowColor)
+                    .setUv(this.u0, this.v1)
+                    .setLight(packedLight);
+            buffer.addVertex(pose, effect.x1 + shadowOffset, effect.y1 + shadowOffset, effect.depth + depthOffset)
+                    .setColor(shadowColor)
+                    .setUv(this.u1, this.v1)
+                    .setLight(packedLight);
+            buffer.addVertex(pose, effect.x0 + shadowOffset, effect.y1 + shadowOffset, effect.depth + depthOffset)
+                    .setColor(shadowColor)
+                    .setUv(this.u1, this.v0)
+                    .setLight(packedLight);
+        }
+    }
+
+    private void handler$zdd000$sodium$drawEffectFast(Effect effect, float offset, float depthOffset, int c, VertexConsumer vertexConsumer, int light, Matrix4f matrix, CallbackInfo ci) {
+        var writer = VertexConsumerUtils.convertOrLog(vertexConsumer);
+
+        if (writer == null) {
+            return;
+        }
+
+        ci.cancel();
+
+        float x1 = effect.x0();
+        float x2 = effect.x1();
+        float h1 = effect.y0();
+        float h2 = effect.y1();
+        float z = effect.depth() + depthOffset;
+
+        int color = ColorARGB.toABGR(c);
+
+        try (MemoryStack stack = MemoryStack.stackPush()) {
+            long buffer = stack.nmalloc(4 * GlyphVertex.STRIDE);
+            long ptr = buffer;
+
+            write(ptr, matrix, x1 + offset, h1 + offset, z, color, this.u0, this.v0, light);
+            ptr += GlyphVertex.STRIDE;
+
+            write(ptr, matrix, x2 + offset, h1 + offset, z, color, this.u0, this.v1, light);
+            ptr += GlyphVertex.STRIDE;
+
+            write(ptr, matrix, x2 + offset, h2 + offset, z, color, this.u1, this.v1, light);
+            ptr += GlyphVertex.STRIDE;
+
+            write(ptr, matrix, x1 + offset, h2 + offset, z, color, this.u1, this.v0, light);
+            ptr += GlyphVertex.STRIDE;
+
+            writer.push(stack, buffer, 4, GlyphVertex.FORMAT);
+        }
     }
 
     public RenderType renderType(Font.DisplayMode displayMode) {
@@ -124,5 +_,13 @@
         boolean hasShadow() {
             return this.shadowColor() != 0;
         }
+    }
+    
+    private static void write(long buffer, Matrix4f matrix, float x, float y, float z, int color, float u, float v, int light) {
+        float x2 = MatrixHelper.transformPositionX(matrix, x, y, z);
+        float y2 = MatrixHelper.transformPositionY(matrix, x, y, z);
+        float z2 = MatrixHelper.transformPositionZ(matrix, x, y, z);
+
+        GlyphVertex.put(buffer, x2, y2, z2, color, u, v, light);
     }
 }
