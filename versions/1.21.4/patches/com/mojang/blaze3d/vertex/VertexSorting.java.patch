--- a/com/mojang/blaze3d/vertex/VertexSorting.java
+++ b/com/mojang/blaze3d/vertex/VertexSorting.java
@@ -1,38 +_,31 @@
 package com.mojang.blaze3d.vertex;
 
-import com.google.common.primitives.Floats;
-import it.unimi.dsi.fastutil.ints.IntArrays;
+import net.caffeinemc.mods.sodium.client.util.sorting.VertexSorters;
 import org.joml.Vector3f;
 
 public interface VertexSorting {
     VertexSorting DISTANCE_TO_ORIGIN = byDistance(0.0F, 0.0F, 0.0F);
-    VertexSorting ORTHOGRAPHIC_Z = byDistance(vector -> -vector.z());
+    VertexSorting ORTHOGRAPHIC_Z = modifyExpressionValue$zdg000$sodium$modifyVertexSorting(byDistance((vector3f) -> -vector3f.z()));
 
     static VertexSorting byDistance(float x, float y, float z) {
-        return byDistance(new Vector3f(x, y, z));
+        return VertexSorters.distance(x, y, z);
     }
 
     static VertexSorting byDistance(Vector3f vector) {
         return byDistance(vector::distanceSquared);
     }
 
-    static VertexSorting byDistance(VertexSorting.DistanceFunction distanceFunction) {
-        return vectors -> {
-            float[] floats = new float[vectors.length];
-            int[] ints = new int[vectors.length];
-
-            for (int i = 0; i < vectors.length; ints[i] = i++) {
-                floats[i] = distanceFunction.apply(vectors[i]);
-            }
-
-            IntArrays.mergeSort(ints, (i1, i2) -> Floats.compare(floats[i2], floats[i1]));
-            return ints;
-        };
+    static VertexSorting byDistance(VertexSorting.DistanceFunction function) {
+        return VertexSorters.fallback(function);
     }
 
     int[] sort(Vector3f[] vectors);
 
     public interface DistanceFunction {
         float apply(Vector3f vector);
+    }
+    
+    private static VertexSorting modifyExpressionValue$zdg000$sodium$modifyVertexSorting(VertexSorting original) {
+        return VertexSorters.orthographicZ();
     }
 }
