--- a/com/mojang/blaze3d/vertex/VertexMultiConsumer.java
+++ b/com/mojang/blaze3d/vertex/VertexMultiConsumer.java
@@ -1,5 +_,8 @@
 package com.mojang.blaze3d.vertex;
 
+import net.caffeinemc.mods.sodium.api.vertex.buffer.VertexBufferWriter;
+import org.lwjgl.system.MemoryStack;
+
 import java.util.function.Consumer;
 
 public class VertexMultiConsumer {
@@ -16,12 +_,22 @@
     }
 
     public static VertexConsumer create(VertexConsumer... delegates) {
-        return new VertexMultiConsumer.Multiple(delegates);
-    }
-
-    static class Double implements VertexConsumer {
+        return new VertexMultiConsumer.Multiple(delegates, allDelegatesSupportIntrinsics(delegates));
+    }
+    
+    private static boolean allDelegatesSupportIntrinsics(VertexConsumer[] delegates) {
+        for (var delegate : delegates) {
+            if (VertexBufferWriter.tryOf(delegate) == null) {
+                return false;
+            }
+        }
+        return true;
+    }
+    
+    static class Double implements VertexConsumer, VertexBufferWriter {
         private final VertexConsumer first;
         private final VertexConsumer second;
+        private boolean canUseIntrinsics;
 
         public Double(VertexConsumer first, VertexConsumer second) {
             if (first == second) {
@@ -30,6 +_,7 @@
                 this.first = first;
                 this.second = second;
             }
+            this.canUseIntrinsics = VertexBufferWriter.tryOf(this.first) != null && VertexBufferWriter.tryOf(this.second) != null;
         }
 
         @Override
@@ -81,10 +_,21 @@
             this.first.addVertex(x, y, z, color, u, v, packedOverlay, packedLight, normalX, normalY, normalZ);
             this.second.addVertex(x, y, z, color, u, v, packedOverlay, packedLight, normalX, normalY, normalZ);
         }
+
+        @Override
+        public void push(MemoryStack stack, long ptr, int count, VertexFormat format) {
+            VertexBufferWriter.copyInto(VertexBufferWriter.of(this.first), stack, ptr, count, format);
+            VertexBufferWriter.copyInto(VertexBufferWriter.of(this.second), stack, ptr, count, format);
+        }
+
+        @Override
+        public boolean canUseIntrinsics() {
+            return this.canUseIntrinsics;
+        }
     }
 
-    record Multiple(VertexConsumer[] delegates) implements VertexConsumer {
-        Multiple(VertexConsumer[] delegates) {
+    record Multiple(VertexConsumer[] delegates, boolean canUseIntrinsics) implements VertexConsumer, VertexBufferWriter {
+        Multiple {
             for (int i = 0; i < delegates.length; i++) {
                 for (int i1 = i + 1; i1 < delegates.length; i1++) {
                     if (delegates[i] == delegates[i1]) {
@@ -92,10 +_,8 @@
                     }
                 }
             }
-
-            this.delegates = delegates;
         }
-
+        
         private void forEach(Consumer<VertexConsumer> action) {
             for (VertexConsumer vertexConsumer : this.delegates) {
                 action.accept(vertexConsumer);
@@ -139,10 +_,20 @@
         }
 
         @Override
-        public void addVertex(
-            float x, float y, float z, int color, float u, float v, int packedOverlay, int packedLight, float normalX, float normalY, float normalZ
-        ) {
+        public void addVertex(float x, float y, float z, int color, float u, float v, int packedOverlay, int packedLight, float normalX, float normalY, float normalZ) {
             this.forEach(vertexConsumer -> vertexConsumer.addVertex(x, y, z, color, u, v, packedOverlay, packedLight, normalX, normalY, normalZ));
+        }
+
+        @Override
+        public boolean canUseIntrinsics() {
+            return this.canUseIntrinsics;
+        }
+
+        @Override
+        public void push(MemoryStack stack, long ptr, int count, VertexFormat format) {
+            for (var delegate : this.delegates) {
+                VertexBufferWriter.copyInto(VertexBufferWriter.of(delegate), stack, ptr, count, format);
+            }
         }
     }
 }
