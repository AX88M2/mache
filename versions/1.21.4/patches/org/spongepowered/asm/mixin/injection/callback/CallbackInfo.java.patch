--- /dev/null
+++ b/org/spongepowered/asm/mixin/injection/callback/CallbackInfo.java
@@ -1,0 +_,68 @@
+package org.spongepowered.asm.mixin.injection.callback;
+
+import java.util.concurrent.CancellationException;
+
+public class CallbackInfo implements Cancellable {
+
+    /**
+     * Method name being injected into, this is useful if a single callback is
+     * injecting into multiple methods.
+     */
+    private final String name;
+
+    /**
+     * True if this callback is cancellable
+     */
+    private final boolean cancellable;
+
+    /**
+     * True if this callback has been cancelled
+     */
+    private boolean cancelled;
+
+    /**
+     * This ctor is always called by injected code
+     *
+     * @param name calling method name
+     * @param cancellable true if the callback can be cancelled
+     */
+    public CallbackInfo(String name, boolean cancellable) {
+        this.name = name;
+        this.cancellable = cancellable;
+    }
+    
+    public String getId() {
+        return this.name;
+    }
+    
+    @Override
+    public String toString() {
+        return String.format("CallbackInfo[TYPE=%s,NAME=%s,CANCELLABLE=%s]", this.getClass().getSimpleName(), this.name, this.cancellable);
+    }
+
+    @Override
+    public final boolean isCancellable() {
+        return this.cancellable;
+    }
+
+    @Override
+    public final boolean isCancelled() {
+        return this.cancelled;
+    }
+    
+    @Override
+    public void cancel() throws CancellationException {
+        if (!this.cancellable) {
+            throw new CancellationException(String.format("The call %s is not cancellable.", this.name));
+        }
+
+        this.cancelled = true;
+    }
+
+    // Methods below this point used by the CallbackInjector
+
+    static String getCallInfoClassName() {
+        return CallbackInfo.class.getName();
+    }
+}
+
